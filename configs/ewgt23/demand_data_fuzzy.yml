# Yaml datafile for demand data. Data of test case.

# Market
market:
  - id: 1
    departure_station: '60000'
    departure_station_coords: [40.416775, -3.703790]
    arrival_station: '04040'
    arrival_station_coords: [41.648822, -0.889085]
  - id: 2
    departure_station: '04040'
    departure_station_coords: [41.648822, -0.889085]
    arrival_station: '71801'
    arrival_station_coords: [41.385064, 2.173404]
  - id: 3
    departure_station: '60000'
    departure_station_coords: [40.416775, -3.703790]
    arrival_station: '71801'
    arrival_station_coords: [41.385064, 2.173404]

# User Pattern
userPattern:
  - id: 1
    name: Business
    rules:
      R0: IF (price is expensive) THEN 20.0
      R1: IF (origin is very_near) & (destination is very_near) THEN 16.0
      R2: IF (origin is very_near) & (destination is very_near) THEN 24.0
      R3: IF (origin is very_near) & (destination is very_near) & (departure_time is in_time) & (arrival_time is in_time) THEN 40.0
    variables:
      - name: origin
        type: fuzzy
        support: [0, 100]
        sets: [very_near, mid_range, far, far_away]
        very_near: [0, 0, 10, 20]
        mid_range: [10, 20, 50, 60]
        far: [50, 60, 70, 80]
        far_away:  [70, 80, 100, 100]
      - name: destination
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ very_near, mid_range, far, far_away ]
        very_near: [ 0, 0, 10, 20 ]
        mid_range: [ 10, 20, 50, 60 ]
        far: [ 50, 60, 70, 80 ]
        far_away: [ 70, 80, 100, 100 ]
      - name: departure_time
        type: fuzzy
        support: [0, 100]
        sets: [in_time, close, remote, very_remote]
        in_time: [0, 0, 10, 30]
        close: [10, 30, 40, 60]
        remote: [40, 60, 70, 90]
        very_remote: [70, 90, 100, 100]
      - name: arrival_time
        type: fuzzy
        support: [0, 100]
        sets: [ in_time, close, remote, very_remote ]
        in_time: [ 0, 0, 10, 30 ]
        close: [ 10, 30, 40, 60 ]
        remote: [ 40, 60, 70, 90 ]
        very_remote: [ 70, 90, 100, 100 ]
      - name: price
        type: fuzzy
        support: [0, 100]
        sets: [very_cheap, cheap, medium, expensive]
        very_cheap: [0, 0, 5, 15]
        cheap: [5, 15, 25, 35]
        medium: [25, 35, 55, 65]
        expensive: [55, 65, 100, 100]
      - name: seat
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ basic, tourist, premium ]
        basic: [ 0, 0, 15, 25 ]
        tourist: [ 15, 25, 45, 55 ]
        premium: [ 45, 55, 100, 100 ]
    arrival_time: norm
    arrival_time_kwargs:
      loc: 8
      scale: 1
    purchase_day: randint
    purchase_day_kwargs:
      low: 2
      high: 7
    forbidden_departure_hours:
      start: 9
      end: 24
    seats:
      - id: 1
        utility: 10
      - id: 2
        utility: 15
      - id: 3
        utility: 20
    train_service_providers:
      - id: 1
        utility: 2
    penalty_arrival_time: polynomial
    penalty_arrival_time_kwargs:
      b_0: 0
      b_1: 1
    penalty_departure_time: polynomial
    penalty_departure_time_kwargs:
      b_0: 0
      b_1: 0.7
    penalty_cost: polynomial
    penalty_cost_kwargs:
      b_0: 0
      b_1: 0.05
    penalty_travel_time: polynomial
    penalty_travel_time_kwargs:
      b_0: 0
      b_1: 0.4
    error: norm
    error_kwargs:
      loc: 2
      scale: 1
  - id: 2
    name: Student
    rules:
      R0: IF (price is very_cheap) THEN 70.0
      R1: IF (origin is very_near) & (destination is very_near) THEN 22.5
      R2: IF (origin is very_near) & (destination is very_near) & (departure_time is in_time) & (arrival_time is in_time) THEN 7.5
    variables:
      - name: origin
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ very_near, mid_range, far, far_away ]
        very_near: [ 0, 0, 10, 20 ]
        mid_range: [ 10, 20, 50, 60 ]
        far: [ 50, 60, 70, 80 ]
        far_away: [ 70, 80, 100, 100 ]
      - name: destination
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ very_near, mid_range, far, far_away ]
        very_near: [ 0, 0, 10, 20 ]
        mid_range: [ 10, 20, 50, 60 ]
        far: [ 50, 60, 70, 80 ]
        far_away: [ 70, 80, 100, 100 ]
      - name: departure_time
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ in_time, close, remote, very_remote ]
        in_time: [ 0, 0, 10, 30 ]
        close: [ 10, 30, 40, 60 ]
        remote: [ 40, 60, 70, 90 ]
        very_remote: [ 70, 90, 100, 100 ]
      - name: arrival_time
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ in_time, close, remote, very_remote ]
        in_time: [ 0, 0, 10, 30 ]
        close: [ 10, 30, 40, 60 ]
        remote: [ 40, 60, 70, 90 ]
        very_remote: [ 70, 90, 100, 100 ]
      - name: price
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ very_cheap, cheap, medium, expensive ]
        very_cheap: [ 0, 0, 5, 15 ]
        cheap: [ 5, 15, 25, 35 ]
        medium: [ 25, 35, 55, 65 ]
        expensive: [ 55, 65, 100, 100 ]
      - name: seat
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ basic, tourist, premium ]
        basic: [ 0, 0, 15, 25 ]
        tourist: [ 15, 25, 45, 55 ]
        premium: [ 45, 55, 100, 100 ]
    arrival_time: norm
    arrival_time_kwargs:
      loc: 18
      scale: 3
    purchase_day: randint
    purchase_day_kwargs:
      low: 0
      high: 4
    forbidden_departure_hours:
      start: 6
      end: 14
    seats:
      - id: 1
        utility: 10
      - id: 2
        utility: 12
      - id: 3
        utility: 15
    train_service_providers:
      - id: 1
        utility: 1
    penalty_arrival_time: polynomial
    penalty_arrival_time_kwargs:
      b_0: 0
      b_1: 0.1
    penalty_departure_time: polynomial
    penalty_departure_time_kwargs:
      b_0: 0
      b_1: 0.2
    penalty_cost: polynomial
    penalty_cost_kwargs:
      b_0: 0
      b_1: 0.4
    penalty_travel_time: polynomial
    penalty_travel_time_kwargs:
      b_0: 0
      b_1: 0.3
    error: norm
    error_kwargs:
      loc: 1
      scale: 0.5
  - id: 3
    name: Tourist
    rules:
      R0: IF (seat is tourist) THEN 30.0
      R1: IF (origin is very_near) & (destination is very_near) THEN 40.0
      R2: IF (departure_time is close) & (arrival_time is close) THEN 30.0
    variables:
      - name: origin
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ very_near, mid_range, far, far_away ]
        very_near: [ 0, 0, 10, 20 ]
        mid_range: [ 10, 20, 50, 60 ]
        far: [ 50, 60, 70, 80 ]
        far_away: [ 70, 80, 100, 100 ]
      - name: destination
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ very_near, mid_range, far, far_away ]
        very_near: [ 0, 0, 10, 20 ]
        mid_range: [ 10, 20, 50, 60 ]
        far: [ 50, 60, 70, 80 ]
        far_away: [ 70, 80, 100, 100 ]
      - name: departure_time
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ in_time, close, remote, very_remote ]
        in_time: [ 0, 0, 10, 30 ]
        close: [ 10, 30, 40, 60 ]
        remote: [ 40, 60, 70, 90 ]
        very_remote: [ 70, 90, 100, 100 ]
      - name: arrival_time
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ in_time, close, remote, very_remote ]
        in_time: [ 0, 0, 10, 30 ]
        close: [ 10, 30, 40, 60 ]
        remote: [ 40, 60, 70, 90 ]
        very_remote: [ 70, 90, 100, 100 ]
      - name: price
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ very_cheap, cheap, medium, expensive ]
        very_cheap: [ 0, 0, 5, 15 ]
        cheap: [ 5, 15, 25, 35 ]
        medium: [ 25, 35, 55, 65 ]
        expensive: [ 55, 65, 100, 100 ]
      - name: seat
        type: fuzzy
        support: [ 0, 100 ]
        sets: [ basic, tourist, premium ]
        basic: [ 0, 0, 15, 25 ]
        tourist: [ 15, 25, 45, 55 ]
        premium: [ 45, 55, 100, 100 ]
    arrival_time: norm
    arrival_time_kwargs:
      loc: 14
      scale: 6
    purchase_day: randint
    purchase_day_kwargs:
      low: 1
      high: 15
    forbidden_departure_hours:
      start: 0
      end: 6
    seats:
      - id: 1
        utility: 10
      - id: 2
        utility: 18
      - id: 3
        utility: 20
    penalty_arrival_time: polynomial
    penalty_arrival_time_kwargs:
      b_0: 0
      b_1: 0.4
    penalty_departure_time: polynomial
    penalty_departure_time_kwargs:
      b_0: 0
      b_1: 0.6
    penalty_cost: polynomial
    penalty_cost_kwargs:
      b_0: 0
      b_1: 0.2
    penalty_travel_time: polynomial
    penalty_travel_time_kwargs:
      b_0: 0
      b_1: 0.15
    error: norm
    error_kwargs:
      loc: 2.5
      scale: 3

# Demand Pattern
demandPattern:
  - id: 1
    name: Monday-Thursday
    markets:
      # Madrid - Zaragoza
      - market: 1
        potential_demand: randint
        potential_demand_kwargs:
          low: 1000
          high: 1800
        user_pattern_distribution:
          - id: 1
            percentage: 0.35
          - id: 2
            percentage: 0.55
          - id: 3
            percentage: 0.1
      # Zaragoza - Barcelona
      - market: 2
        potential_demand: randint
        potential_demand_kwargs:
          low: 1000
          high: 1200
        user_pattern_distribution:
          - id: 1
            percentage: 0.45
          - id: 2
            percentage: 0.3
          - id: 3
            percentage: 0.25
      # Madrid - Barcelona
      - market: 3
        potential_demand: randint
        potential_demand_kwargs:
          low: 5000
          high: 7000
        user_pattern_distribution:
          - id: 1
            percentage: 0.6
          - id: 2
            percentage: 0.1
          - id: 3
            percentage: 0.3

# Day
day:
  - id: 1
    date: 2023-09-06
    demandPattern: 1
